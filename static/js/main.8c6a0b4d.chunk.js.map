{"version":3,"sources":["components/LoveLive.js","components/JokesPic.js","App.js","serviceWorker.js","index.js"],"names":["Title","Text","LoveLive","useState","sweet","setSweet","useEffect","axios","get","then","res","data","catch","err","console","error","style","textAlign","marginTop","mark","Header","Content","Footer","App","minHeight","className","padding","Boolean","window","location","hostname","match","ReactDOM","render","locale","zhCN","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+VAKQA,G,ICDAA,M,IDCAA,OAAOC,E,IAAAA,KA8BAC,EA1BE,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,KAkBnB,OAJAC,qBAAU,WAVNC,IAAMC,IANE,gDAOPC,MAAK,SAAAC,GAAG,OAAIL,EAASK,EAAIC,SACzBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAC3BJ,MAAK,iBASP,IAGC,yBAAKO,MAAO,CAAEC,UAAW,SAAUC,UAAW,SAC1C,kBAAC,EAAD,cACA,kBAACjB,EAAD,CAAMkB,MAAI,GAAEf,KEtBhBgB,E,IAAAA,OAAQC,E,IAAAA,QAASC,E,IAAAA,OAgBVC,MAdf,WACE,OACE,uBAAQP,MAAO,CAAEQ,UAAW,UAC1B,kBAACJ,EAAD,CAAQK,UAAU,WAElB,kBAACJ,EAAD,CAASL,MAAO,CAAEU,QAAS,YACxB,EACD,kBAAC,EAAD,OAEF,kBAACJ,EAAD,CAAQN,MAAO,CAAEC,UAAW,WAA5B,qCCPcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCTNC,IAASC,OACL,uBAAgBC,OAAQC,KACpB,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM4B,c","file":"static/js/main.8c6a0b4d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography } from 'antd';\n\nimport axios from \"axios\";\n\nconst { Title, Text } = Typography;\n\nconst apiAddr = \"https://api.lovelive.tools/api/SweetNothings\";\n\nconst LoveLive = () => {\n    const [sweet, setSweet] = useState(\"\");\n\n    const updateSweet = () => {\n        axios.get(apiAddr)\n        .then(res => setSweet(res.data))\n        .catch(err => console.error(err))\n        .then(() => {\n            // setTimeout(() => {\n            //     updateSweet();\n            // }, 1000 * 20);\n        });\n    }\n\n    useEffect(() => {\n        updateSweet();\n    }, []);\n\n    return (\n        <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n            <Title>For U</Title>\n            <Text mark>{sweet}</Text>\n        </div>\n    );\n};\n\nexport default LoveLive;\n","import React, { useState, useEffect } from 'react';\nimport { Spin, Result, Typography, Pagination } from 'antd';\nimport axios from \"axios\";\n\nconst { Title } = Typography;\n\nconst apiAddr = \"http://route.showapi.com/341-2\";\n\nconst JokesPic = () => {\n    const [page, setPage] = useState(1);\n    const [index, setIndex] = useState(1);\n    const [result, setResult] = useState(null);\n\n    useEffect(() => {\n        axios.get(apiAddr, {\n            params: {\n                showapi_appid: \"159805\",\n                showapi_sign: \"410fa151881b4afc84b2b7470a3869cf\",\n                page: {page},\n                maxResult: 30\n            }\n        })\n        .then(res => setResult(res.data))\n        .catch(err => console.error(err));\n    }, []);\n\n    if (result === null) {\n        // 缓冲\n        return (\n            <div style={{ textAlign: \"center\", borderRadius: \"4px\", margin: \"20px 0\", padding: \"30px 50px\" }}>\n                <Spin delay={500} />\n            </div>\n        );\n    } else if (result.showapi_res_code ===0) {\n        // api请求正确\n        if (result.showapi_res_body.ret_code === 0 && result.showapi_res_body.contentlist.length > 0) {\n            const contentlist = result.showapi_res_body.contentlist;\n            if (contentlist[index-1].type === 2) {\n                return (\n                    <div style={{ textAlign: \"center\" }}>\n                        <Pagination pageSize={1} onChange={setIndex} total={contentlist.length} style={{ margin: \"10px 0\" }} />\n                        <Title>{contentlist[index-1].title}</Title>\n                        <img src={contentlist[index-1].img} />\n                    </div>\n                );\n            }\n            return (\n                <Result\n                    status=\"warning\"\n                    title=\"发生了什么\"\n                    subTitle=\"可能是feitupian资源\"\n                ></Result>\n            );\n        } else {\n            // 没有数据\n            return (\n                <Result\n                    status=\"warning\"\n                    title=\"木有数据\"\n                    subTitle=\"什么鬼啊。。。\"\n                ></Result>\n            );\n        }\n    } else {\n        // 错误提示\n        return (\n            <Result\n                status=\"error\"\n                title=\"请求出错\"\n                subTitle={result.showapi_res_error}\n            ></Result>\n        );\n    }\n};\n\nexport default JokesPic;\n","import React from 'react';\nimport './App.css';\n\nimport { Layout } from 'antd';\n\nimport JokesPic from './components/JokesPic';\nimport LoveLive from './components/LoveLive';\n\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Header className=\"header\">\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        {false && <JokesPic />}\n        <LoveLive />\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Husky ©2020 Created by Damon</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ConfigProvider } from 'antd';\nimport zhCN from 'antd/es/locale/zh_CN';\n\nReactDOM.render(\n    <ConfigProvider locale={zhCN}>\n        <App />\n    </ConfigProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}